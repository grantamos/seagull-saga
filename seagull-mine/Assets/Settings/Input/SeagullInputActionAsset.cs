//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Input/SeagullInputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SeagullInputActionAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SeagullInputActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SeagullInputActionAsset"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""9f4d684e-f3b1-445b-9d35-7ce60da435ac"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""375ba955-0fae-403c-b5dd-58236ae8b720"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Button"",
                    ""id"": ""9b33a824-85df-44cb-b1ed-5bc856ba0d9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""8cff9deb-6028-4e7d-a049-46fbcc082ec5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""3a119510-5284-4c29-94e2-1f466e5755f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""d231a6ff-53bb-4d7e-95f9-18a2e88c3504"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""8f01a499-f68e-4e3b-9d62-28d30483b847"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5eb33f1e-863b-4f1d-9685-34443b5defa6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""20abd3f1-b14d-4bf1-a2b0-d81d8ba9e425"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""13bb4f8f-a0ce-411a-9964-bcbef63998a6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebdb5a14-6505-4819-8baf-838e3bff8043"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98ec5255-9969-4334-ab2a-fc8201b2eb7b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7821b8b3-ed8f-44fb-9d59-9d50d691eeb1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Accelerate = m_Default.FindAction("Accelerate", throwIfNotFound: true);
        m_Default_Turn = m_Default.FindAction("Turn", throwIfNotFound: true);
        m_Default_Brake = m_Default.FindAction("Brake", throwIfNotFound: true);
        m_Default_Pause = m_Default.FindAction("Pause", throwIfNotFound: true);
        m_Default_Drop = m_Default.FindAction("Drop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_Accelerate;
    private readonly InputAction m_Default_Turn;
    private readonly InputAction m_Default_Brake;
    private readonly InputAction m_Default_Pause;
    private readonly InputAction m_Default_Drop;
    public struct DefaultActions
    {
        private @SeagullInputActionAsset m_Wrapper;
        public DefaultActions(@SeagullInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_Default_Accelerate;
        public InputAction @Turn => m_Wrapper.m_Default_Turn;
        public InputAction @Brake => m_Wrapper.m_Default_Brake;
        public InputAction @Pause => m_Wrapper.m_Default_Pause;
        public InputAction @Drop => m_Wrapper.m_Default_Drop;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @Accelerate.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAccelerate;
                @Accelerate.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAccelerate;
                @Accelerate.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAccelerate;
                @Turn.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnTurn;
                @Brake.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBrake;
                @Pause.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPause;
                @Drop.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDrop;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Accelerate.started += instance.OnAccelerate;
                @Accelerate.performed += instance.OnAccelerate;
                @Accelerate.canceled += instance.OnAccelerate;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
}
